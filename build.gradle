buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

plugins {
    id 'java'
}

apply plugin: 'io.qameta.allure'

allure {
    autoconfigure = true
    version = '2.4.1'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation 'org.testng:testng:7.1.0'
    implementation 'org.seleniumhq.selenium:selenium-java:4.0.0-alpha-5'
    implementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    implementation 'com.beust:jcommander:1.78'
    implementation 'com.thoughtworks.xstream:xstream:1.4.12'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'mysql:mysql-connector-java:8.0.19'
    implementation 'org.hibernate:hibernate-core:5.4.10.Final'
    implementation 'io.qameta.allure:allure-testng:2.13.3'
}

test {
    useTestNG()
}

task testCreateItems(type: Test) {
    useTestNG() {
        suites 'src/test/resources/testng-create.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
}

task testRenameItems(type: Test) {
    useTestNG() {
        suites 'src/test/resources/testng-rename.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
}

task testDeleteItems(type: Test) {
    useTestNG() {
        suites 'src/test/resources/testng-delete.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
}